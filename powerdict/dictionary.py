# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/01-dictionary-page.ipynb (unless otherwise specified).

__all__ = ['construct_field_desc_table_str', 'get_dp_field_to_url_format_str', 'get_dp_field_to_title',
           'format_id_values', 'construct_linked_ids_table_str', 'construct_linked_idxs']

# Cell
def construct_field_desc_table_str(package, resource='ids'):
    s_field_descs = pd.Series({field['title']: field['description'] for field in package.get_resource(resource).schema.fields})

    s_field_descs.index.name = 'Field'
    s_field_descs.name = 'Description'

    md_str = s_field_descs.to_markdown()

    return md_str

# Cell
def get_dp_field_to_url_format_str(datapackage_json_fp):
    package = Package(datapackage_json_fp, profile='tabular-data-package')
    ids_resource = package.get_resource('ids')

    id_field_to_url_format_str = {
        field['name']: field['url_format']
        for field
        in ids_resource['schema']['fields']
        if 'url_format' in field.keys()
    }

    return id_field_to_url_format_str

def get_dp_field_to_title(datapackage_json_fp):
    package = Package(datapackage_json_fp, profile='tabular-data-package')
    ids_resource = package.get_resource('ids')

    id_field_to_title = {
        field['name']: field['title']
        for field
        in ids_resource['schema']['fields']
    }

    return id_field_to_title

def format_id_values(id_values, id_type, id_field_to_url_format_str):
    if id_type in id_field_to_url_format_str.keys():
        url_format_str = id_field_to_url_format_str[id_type]
        id_values_strs = [f'[{id_value}]({url_format_str.format(value=id_value)})' for id_value in id_values]
    else:
        id_values_strs = [str(id_value) for id_value in id_values]

    return id_values_strs

construct_linked_idxs = lambda df_ids_clean: [
    f'[{idx}](https://osuked.github.io/Power-Station-Dictionary/objects/{idx})'
    for idx
    in df_ids_clean.index
]

def construct_linked_ids_table_str(package, datapackage_json_fp):
    id_field_to_url_format_str = get_dp_field_to_url_format_str(datapackage_json_fp)
    id_field_to_title = get_dp_field_to_title(datapackage_json_fp)

    df_ids_clean = pd.DataFrame(index=df_ids.index, columns=id_field_to_title.values())

    for osuked_id, row in df_ids.iterrows():
        row = pd.Series({
            id_field_to_title[id_type]: (
                ', '.join([str(id_) for id_ in format_id_values(id_values, id_type, id_field_to_url_format_str)]) if isinstance(id_values, list)
                else f'[{id_values}]({id_field_to_url_format_str[id_type].format(value=id_values)})' if (id_type in id_field_to_url_format_str.keys()) and (id_values is not None)
                else id_values
            )
            for id_type, id_values
            in row.items()
        }).fillna('-')

        df_ids_clean.loc[osuked_id] = row

    df_ids_clean = df_ids_clean.drop(columns='OSUKED ID')
    df_ids_clean.index = construct_linked_idxs(df_ids_clean)
    df_ids_clean.index.name = 'OSUKED ID'

    return df_ids_clean.to_markdown()